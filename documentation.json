{
    "pipes": [],
    "interfaces": [
        {
            "name": "IAuthLoginResponse",
            "id": "interface-IAuthLoginResponse-744e5d605024eee45034de03a2a1c492661ee15f2625a99b9b0d7bd6e695179c22ec60894c79421684b947a0b19f200bd2d05311e0d890b84749d8b7d11bb2ed",
            "file": "src/app/api/typings/auth.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AuthLoginForm, FormValue } from 'src/app/typings';\r\n\r\nexport type AuthLoginData = FormValue<AuthLoginForm>;\r\n\r\nexport interface IAuthLoginResponse {\r\n  token: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "BaseApiService",
            "id": "injectable-BaseApiService-861df5107b6d5fefffdd50c8ef57c28c1185f4d7178c61c54918877c970532778b8234a557f91aa84de693971e99c710ed1120290d59a59757061d9488d02b9c",
            "file": "src/app/api/services/base-api.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "postQuery",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<B>",
                    "typeParameters": [
                        "T",
                        "B"
                    ],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BaseApiService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  postQuery<T, B>(url: string, data: T): Observable<B> {\r\n    return this.http.post<B>(url, data);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "DashboardLayoutService",
            "id": "injectable-DashboardLayoutService-7be68f92ade4213372f01d83878ab3519aef7cdf26950202868e9f1f4914730d5988c190cc610eff4d6855b162e57805d9cbc805c002612660e9b729df3a1e30",
            "file": "src/app/layout/dashboard-layout/services/dashboard-layout.service.ts",
            "properties": [
                {
                    "name": "#menuItems",
                    "defaultValue": "new BehaviorSubject<DashboardMenuItem[]>(this.initMenuItems())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "initMenuItems",
                    "args": [],
                    "optional": false,
                    "returnType": "DashboardMenuItem[]",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { DASHBOARD_ROUTE } from 'src/app/constants';\r\nimport { DashboardMenuItem } from 'src/app/typings';\r\n\r\n@Injectable()\r\nexport class DashboardLayoutService {\r\n  #menuItems = new BehaviorSubject<DashboardMenuItem[]>(this.initMenuItems());\r\n\r\n  get menuItems$(): Observable<DashboardMenuItem[]> {\r\n    return this.#menuItems.asObservable();\r\n  }\r\n\r\n  private initMenuItems(): DashboardMenuItem[] {\r\n    return [\r\n      {\r\n        title: 'menu.shop',\r\n        icon: 'shop',\r\n        route: DASHBOARD_ROUTE.shop,\r\n      },\r\n      {\r\n        title: 'menu.car',\r\n        icon: 'car',\r\n        route: DASHBOARD_ROUTE.car,\r\n      },\r\n      {\r\n        title: 'menu.partner',\r\n        icon: 'team',\r\n        route: DASHBOARD_ROUTE.partner,\r\n      },\r\n      {\r\n        title: 'menu.request',\r\n        icon: 'message',\r\n        route: DASHBOARD_ROUTE.request,\r\n      },\r\n      {\r\n        title: 'menu.feedback',\r\n        icon: 'phone',\r\n        route: DASHBOARD_ROUTE.feedback,\r\n      },\r\n      {\r\n        title: 'menu.settings',\r\n        icon: 'setting',\r\n        route: DASHBOARD_ROUTE.settings,\r\n      },\r\n    ];\r\n  }\r\n}\r\n",
            "accessors": {
                "menuItems$": {
                    "name": "menuItems$",
                    "getSignature": {
                        "name": "menuItems$",
                        "type": "",
                        "returnType": "Observable<DashboardMenuItem[]>",
                        "line": 10
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "DestroyService",
            "id": "injectable-DestroyService-ea043cf71a342c28a1bd6b1f7f876a2ac745ab8b0ea2017a22e19f4aee2913a489f7df256b46bab5443b906dd573170b29d80be5cb52b105b7053e3cb1ea2ffa",
            "file": "src/app/core/services/destroy.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class DestroyService extends Subject<void> implements OnDestroy {\r\n  ngOnDestroy(): void {\r\n    this.next();\r\n    this.complete();\r\n  }\r\n}\r\n",
            "extends": [
                "Subject"
            ],
            "type": "injectable"
        },
        {
            "name": "LanguageService",
            "id": "injectable-LanguageService-4593d1664d13a7a64069cda23913618110a3e019ff5ce8f59eb77c21a69ea9b5a8d654cce570d6acf9fa32225cde8bdbda52d81e1f2093e038b32797c0e0a9e5",
            "file": "src/app/core/services/language.service.ts",
            "properties": [
                {
                    "name": "#currentLang",
                    "defaultValue": "new BehaviorSubject<LANGUAGE>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "langChangeError$",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "langChangeSuccess",
                    "args": [
                        {
                            "name": "lang",
                            "type": "LANGUAGE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isMessage",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "LANGUAGE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isMessage",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChangeLang$",
                    "args": [
                        {
                            "name": "lang",
                            "type": "LANGUAGE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isMessage",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "LANGUAGE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isMessage",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { TranslocoService } from '@ngneat/transloco';\r\nimport { NzI18nService } from 'ng-zorro-antd/i18n';\r\nimport {\r\n  BehaviorSubject,\r\n  catchError,\r\n  EMPTY,\r\n  first,\r\n  from,\r\n  map,\r\n  Observable,\r\n  of,\r\n  startWith,\r\n  switchMap,\r\n  tap,\r\n  toArray,\r\n  withLatestFrom,\r\n} from 'rxjs';\r\nimport { ERROR_MESSAGE, LANGUAGE, LANGUAGE_LOCALE, SUCCESS_MESSAGE } from 'src/app/constants';\r\nimport { LanguageItem } from 'src/app/typings';\r\n\r\nimport { MessageService } from './message.service';\r\nimport { MetaService } from './meta.service';\r\nimport { StorageService } from './storage.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LanguageService {\r\n  #currentLang = new BehaviorSubject<LANGUAGE>(null);\r\n\r\n  get currentLang$(): Observable<LANGUAGE> {\r\n    return this.#currentLang.asObservable();\r\n  }\r\n\r\n  get langItems$(): Observable<LanguageItem[]> {\r\n    return this.currentLang$.pipe(\r\n      withLatestFrom(of(Object.values(LANGUAGE))),\r\n      switchMap(([currentLang, langList]) => {\r\n        return from(langList).pipe(\r\n          map((lang) => ({\r\n            name: lang,\r\n            isSelected: currentLang === lang,\r\n          })),\r\n          toArray(),\r\n        );\r\n      }),\r\n    );\r\n  }\r\n\r\n  constructor(\r\n    private translocoService: TranslocoService,\r\n    private storageService: StorageService,\r\n    private i18nService: NzI18nService,\r\n    private metaService: MetaService,\r\n    private messageService: MessageService,\r\n  ) {}\r\n\r\n  onChangeLang$(lang: LANGUAGE, isMessage: boolean = true): Observable<string> {\r\n    return this.translocoService.setActiveLang(lang).events$.pipe(\r\n      startWith({}),\r\n      first(),\r\n      switchMap(() => this.metaService.updateTitle$()),\r\n      tap(() => {\r\n        this.langChangeSuccess(lang, isMessage);\r\n      }),\r\n      catchError(() => this.langChangeError$()),\r\n    );\r\n  }\r\n\r\n  private langChangeSuccess(lang: LANGUAGE, isMessage: boolean): void {\r\n    this.#currentLang.next(lang);\r\n    this.i18nService.setLocale(LANGUAGE_LOCALE[lang]);\r\n    this.metaService.updateLocale(lang);\r\n\r\n    this.storageService.lang = lang;\r\n\r\n    if (isMessage) {\r\n      this.messageService.onNotifySuccess(SUCCESS_MESSAGE.lang);\r\n    }\r\n  }\r\n\r\n  private langChangeError$(): Observable<never> {\r\n    this.messageService.onNotifyError(ERROR_MESSAGE.lang);\r\n\r\n    return EMPTY;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translocoService",
                        "type": "TranslocoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "i18nService",
                        "type": "NzI18nService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "metaService",
                        "type": "MetaService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "translocoService",
                        "type": "TranslocoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "i18nService",
                        "type": "NzI18nService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "metaService",
                        "type": "MetaService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "currentLang$": {
                    "name": "currentLang$",
                    "getSignature": {
                        "name": "currentLang$",
                        "type": "",
                        "returnType": "Observable<LANGUAGE>",
                        "line": 32
                    }
                },
                "langItems$": {
                    "name": "langItems$",
                    "getSignature": {
                        "name": "langItems$",
                        "type": "",
                        "returnType": "Observable<LanguageItem[]>",
                        "line": 36
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "MessageService",
            "id": "injectable-MessageService-dd9734cdeb250bcf54ad52c58b2618c638684f9a5a8a0dac364a5209cad26e8fa9c2ea94cd22cfb44f75fb318c7f8719e9c367b3682712b3beaf68c125769e0c",
            "file": "src/app/core/services/message.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "onNotifyError",
                    "args": [
                        {
                            "name": "msg",
                            "type": "ERROR_MESSAGE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "ERROR_MESSAGE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onNotifyInfo",
                    "args": [
                        {
                            "name": "msg",
                            "type": "INFO_MESSAGE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "INFO_MESSAGE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onNotifySuccess",
                    "args": [
                        {
                            "name": "msg",
                            "type": "SUCCESS_MESSAGE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "SUCCESS_MESSAGE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { TranslocoService } from '@ngneat/transloco';\r\nimport { NzMessageService } from 'ng-zorro-antd/message';\r\nimport { ERROR_MESSAGE, INFO_MESSAGE, SUCCESS_MESSAGE } from 'src/app/constants';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MessageService {\r\n  constructor(\r\n    private msg: NzMessageService,\r\n    private translocoService: TranslocoService,\r\n  ) {}\r\n\r\n  onNotifySuccess(msg: SUCCESS_MESSAGE): void {\r\n    const text = this.translocoService.translate(msg);\r\n\r\n    this.msg.success(text);\r\n  }\r\n\r\n  onNotifyInfo(msg: INFO_MESSAGE): void {\r\n    const text = this.translocoService.translate(msg);\r\n\r\n    this.msg.info(text);\r\n  }\r\n\r\n  onNotifyError(msg: ERROR_MESSAGE): void {\r\n    const text = this.translocoService.translate(msg);\r\n\r\n    this.msg.error(text);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "msg",
                        "type": "NzMessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translocoService",
                        "type": "TranslocoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "msg",
                        "type": "NzMessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translocoService",
                        "type": "TranslocoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "MetaService",
            "id": "injectable-MetaService-d4b2e704fcbceafec0f6b37236c5a284ab5d3f5c05d04665f0dd0dff60bb34dc356adfb7aedb172eae13f5a297908cf4eda6ea9299166f9fb55e605abf8c29c4",
            "file": "src/app/core/services/meta.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "updateLocale",
                    "args": [
                        {
                            "name": "lang",
                            "type": "LANGUAGE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "LANGUAGE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTitle$",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateWorkerColor",
                    "args": [
                        {
                            "name": "theme",
                            "type": "THEME",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "THEME",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Meta, Title } from '@angular/platform-browser';\r\nimport { TranslocoService } from '@ngneat/transloco';\r\nimport { first, Observable, tap } from 'rxjs';\r\nimport { LANGUAGE, PRIMARY_COLOR, THEME } from 'src/app/constants';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MetaService {\r\n  constructor(\r\n    @Inject(DOCUMENT) private document: Document,\r\n    private meta: Meta,\r\n    private title: Title,\r\n    private translocoService: TranslocoService,\r\n  ) {}\r\n\r\n  updateTitle$(): Observable<string> {\r\n    const key = 'auth.layout_description';\r\n\r\n    return this.translocoService.selectTranslate(key).pipe(\r\n      first(),\r\n      tap((title) => this.title.setTitle(`Sili - ${title}`)),\r\n      tap((title) =>\r\n        this.meta.updateTag({\r\n          name: 'description',\r\n          content: title,\r\n        }),\r\n      ),\r\n    );\r\n  }\r\n\r\n  updateWorkerColor(theme: THEME): void {\r\n    this.meta.updateTag({\r\n      name: 'theme-color',\r\n      content: PRIMARY_COLOR[theme],\r\n    });\r\n  }\r\n\r\n  updateLocale(lang: LANGUAGE): void {\r\n    this.meta.updateTag({\r\n      name: 'locale',\r\n      content: lang,\r\n    });\r\n\r\n    this.meta.updateTag({\r\n      'http-equiv': 'Content-Language',\r\n      content: lang,\r\n    });\r\n\r\n    this.document.documentElement.lang = lang;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "meta",
                        "type": "Meta",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "title",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translocoService",
                        "type": "TranslocoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "meta",
                        "type": "Meta",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "title",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translocoService",
                        "type": "TranslocoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "NavigationService",
            "id": "injectable-NavigationService-bf979b79aeda319646b07e3c35a65c1b46e15226fbb12abd650c8c38934242946916ad9cf45a001b345513425915a3effa2692c43e66d17b5cac944aba926838",
            "file": "src/app/core/services/navigation.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "onLogIn",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onServerErrorPage",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { AUTH_ROUTE, ROOT_ROUTE } from 'src/app/constants';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class NavigationService {\r\n  constructor(private router: Router) {}\r\n\r\n  onLogout(): Promise<boolean> {\r\n    return this.router.navigate([ROOT_ROUTE.auth, AUTH_ROUTE.login]);\r\n  }\r\n\r\n  onLogIn(): Promise<boolean> {\r\n    return this.router.navigate([ROOT_ROUTE.dashboard]);\r\n  }\r\n\r\n  onServerErrorPage(): Promise<boolean> {\r\n    return this.router.navigate([ROOT_ROUTE.server_error]);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ProgressService",
            "id": "injectable-ProgressService-78e6ed50dd58488ac63cde9cf4cecec6c83688f991ed6f33b29cf552bdf4aeab4d9eb93a2e2567c87bc78c9e659936093315c5562835b60df7683aa67ce64068",
            "file": "src/app/core/services/progress.service.ts",
            "properties": [
                {
                    "name": "#status",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProgressService {\r\n  #status = new BehaviorSubject<boolean>(false);\r\n\r\n  get status$(): Observable<boolean> {\r\n    return this.#status.asObservable();\r\n  }\r\n\r\n  set status(state: boolean) {\r\n    this.#status.next(state);\r\n  }\r\n}\r\n",
            "accessors": {
                "status$": {
                    "name": "status$",
                    "getSignature": {
                        "name": "status$",
                        "type": "",
                        "returnType": "Observable<boolean>",
                        "line": 10
                    }
                },
                "status": {
                    "name": "status",
                    "setSignature": {
                        "name": "status",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "state",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 14,
                        "jsdoctags": [
                            {
                                "name": "state",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "StorageService",
            "id": "injectable-StorageService-d4452a43c7f156c50dafa0c8b27fbe95ed1692eb44f708e4dcedce88dc7bfd730d20a8b33dc8ee720d6d2197519002f04c66b2f4c9202c99ac61d37bef4821d0",
            "file": "src/app/core/services/storage.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "removeToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { LANGUAGE, STORAGE_KEY, THEME } from 'src/app/constants';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class StorageService {\r\n  get lang(): LANGUAGE {\r\n    return localStorage.getItem(STORAGE_KEY.lang) as LANGUAGE;\r\n  }\r\n\r\n  set lang(activeLang: LANGUAGE) {\r\n    localStorage.setItem(STORAGE_KEY.lang, activeLang);\r\n  }\r\n\r\n  get theme(): THEME {\r\n    return localStorage.getItem(STORAGE_KEY.theme) as THEME;\r\n  }\r\n\r\n  set theme(activeTheme: THEME) {\r\n    localStorage.setItem(STORAGE_KEY.theme, activeTheme);\r\n  }\r\n\r\n  get token(): string {\r\n    return localStorage.getItem(STORAGE_KEY.token);\r\n  }\r\n\r\n  set token(accessToken: string) {\r\n    localStorage.setItem(STORAGE_KEY.token, accessToken);\r\n  }\r\n\r\n  removeToken(): void {\r\n    localStorage.removeItem(STORAGE_KEY.token);\r\n  }\r\n}\r\n",
            "accessors": {
                "lang": {
                    "name": "lang",
                    "setSignature": {
                        "name": "lang",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "activeLang",
                                "type": "LANGUAGE",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 12,
                        "jsdoctags": [
                            {
                                "name": "activeLang",
                                "type": "LANGUAGE",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "lang",
                        "type": "",
                        "returnType": "LANGUAGE",
                        "line": 8
                    }
                },
                "theme": {
                    "name": "theme",
                    "setSignature": {
                        "name": "theme",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "activeTheme",
                                "type": "THEME",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 20,
                        "jsdoctags": [
                            {
                                "name": "activeTheme",
                                "type": "THEME",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "theme",
                        "type": "",
                        "returnType": "THEME",
                        "line": 16
                    }
                },
                "token": {
                    "name": "token",
                    "setSignature": {
                        "name": "token",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "accessToken",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 28,
                        "jsdoctags": [
                            {
                                "name": "accessToken",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "token",
                        "type": "string",
                        "returnType": "string",
                        "line": 24
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-a5c4567a4d9abb0cbdad497ae45161b093d87f6d859b69dd77d89b04c4444cf023b5d43841bea926faa70a8f150bc56d5bfd9a313d6e8583715a12a2cc689d38",
            "file": "src/app/core/services/theme.service.ts",
            "properties": [
                {
                    "name": "#currentTheme",
                    "defaultValue": "new BehaviorSubject<ThemeType>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getElementByID",
                    "args": [
                        {
                            "name": "theme",
                            "type": "THEME",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HTMLElement",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "THEME",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadCss$",
                    "args": [
                        {
                            "name": "themeState",
                            "type": "ThemeType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ThemeType>",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "themeState",
                            "type": "ThemeType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadTheme$",
                    "args": [
                        {
                            "name": "current",
                            "type": "THEME",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isMessage",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ThemeType>",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "current",
                            "type": "THEME",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isMessage",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removePrevTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "THEME",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "THEME",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "themeChangeError$",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "themeChangeSuccess",
                    "args": [
                        {
                            "name": "theme",
                            "type": "ThemeType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isMessage",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "ThemeType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isMessage",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable, Renderer2, RendererFactory2 } from '@angular/core';\r\nimport { BehaviorSubject, EMPTY, from, Observable, of } from 'rxjs';\r\nimport { catchError, first, map, switchMap, tap, toArray, withLatestFrom } from 'rxjs/operators';\r\nimport { ERROR_MESSAGE, PRIMARY_COLOR, SUCCESS_MESSAGE, THEME } from 'src/app/constants';\r\nimport { ThemeItem, ThemeType } from 'src/app/typings';\r\n\r\nimport { MessageService } from './message.service';\r\nimport { MetaService } from './meta.service';\r\nimport { StorageService } from './storage.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ThemeService {\r\n  #currentTheme = new BehaviorSubject<ThemeType>(null);\r\n\r\n  get currentTheme$(): Observable<ThemeType> {\r\n    return this.#currentTheme.asObservable();\r\n  }\r\n\r\n  get themeList$(): Observable<ThemeItem[]> {\r\n    return this.currentTheme$.pipe(\r\n      map((themeState) => themeState.current),\r\n      withLatestFrom(of(Object.values(THEME))),\r\n      switchMap(([currentTheme, themeList]) =>\r\n        from(themeList).pipe(\r\n          map((theme) => ({\r\n            theme,\r\n            name: `theme.${theme}`,\r\n            isSelected: currentTheme === theme,\r\n          })),\r\n          toArray(),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  get primaryColor$(): Observable<string> {\r\n    return this.currentTheme$.pipe(map((state) => PRIMARY_COLOR[state.current]));\r\n  }\r\n\r\n  get theme(): ThemeType {\r\n    return this.#currentTheme.getValue();\r\n  }\r\n\r\n  get renderer(): Renderer2 {\r\n    return this.rendererF.createRenderer(null, null);\r\n  }\r\n\r\n  get documentEl(): HTMLElement {\r\n    return this.document.documentElement;\r\n  }\r\n\r\n  get documentHead(): HTMLElement {\r\n    return this.document.head;\r\n  }\r\n\r\n  constructor(\r\n    @Inject(DOCUMENT) private document: Document,\r\n    private rendererF: RendererFactory2,\r\n    private storageService: StorageService,\r\n    private metaService: MetaService,\r\n    private messageService: MessageService,\r\n  ) {}\r\n\r\n  loadTheme$(current: THEME, isMessage: boolean = true): Observable<ThemeType> {\r\n    const prev = this.theme?.current;\r\n\r\n    return this.loadCss$({ current, prev }).pipe(\r\n      first(),\r\n      tap((theme) => {\r\n        this.themeChangeSuccess(theme, isMessage);\r\n      }),\r\n      catchError(() => this.themeChangeError$()),\r\n    );\r\n  }\r\n\r\n  private getElementByID(theme: THEME): HTMLElement {\r\n    return this.document.getElementById(theme);\r\n  }\r\n\r\n  private loadCss$(themeState: ThemeType): Observable<ThemeType> {\r\n    return new Observable<ThemeType>((observer) => {\r\n      const link = this.renderer.createElement('link');\r\n\r\n      link.rel = 'stylesheet';\r\n      link.href = `${themeState.current}.css`;\r\n      link.id = themeState.current;\r\n\r\n      link.onload = () => {\r\n        observer.next(themeState);\r\n        observer.complete();\r\n      };\r\n\r\n      link.onerror = (error: ErrorEvent) => {\r\n        observer.error(error);\r\n      };\r\n\r\n      this.documentHead.appendChild(link);\r\n    });\r\n  }\r\n\r\n  private removePrevTheme(theme: THEME): void {\r\n    const prev = this.getElementByID(theme);\r\n\r\n    if (prev) {\r\n      this.renderer.removeClass(this.documentEl, theme);\r\n\r\n      this.renderer.removeChild(this.documentHead, prev);\r\n    }\r\n  }\r\n\r\n  private themeChangeSuccess(theme: ThemeType, isMessage: boolean): void {\r\n    if (theme?.prev) {\r\n      this.removePrevTheme(theme.prev);\r\n    }\r\n\r\n    this.renderer.addClass(this.documentEl, theme.current);\r\n\r\n    this.metaService.updateWorkerColor(theme.current);\r\n\r\n    this.#currentTheme.next(theme);\r\n\r\n    this.storageService.theme = theme.current;\r\n\r\n    if (isMessage) {\r\n      this.messageService.onNotifySuccess(SUCCESS_MESSAGE.theme);\r\n    }\r\n  }\r\n\r\n  private themeChangeError$(): Observable<never> {\r\n    this.messageService.onNotifyError(ERROR_MESSAGE.theme);\r\n\r\n    return EMPTY;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "rendererF",
                        "type": "RendererFactory2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "metaService",
                        "type": "MetaService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rendererF",
                        "type": "RendererFactory2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "metaService",
                        "type": "MetaService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "currentTheme$": {
                    "name": "currentTheme$",
                    "getSignature": {
                        "name": "currentTheme$",
                        "type": "",
                        "returnType": "Observable<ThemeType>",
                        "line": 18
                    }
                },
                "themeList$": {
                    "name": "themeList$",
                    "getSignature": {
                        "name": "themeList$",
                        "type": "",
                        "returnType": "Observable<ThemeItem[]>",
                        "line": 22
                    }
                },
                "primaryColor$": {
                    "name": "primaryColor$",
                    "getSignature": {
                        "name": "primaryColor$",
                        "type": "",
                        "returnType": "Observable<string>",
                        "line": 39
                    }
                },
                "theme": {
                    "name": "theme",
                    "getSignature": {
                        "name": "theme",
                        "type": "",
                        "returnType": "ThemeType",
                        "line": 43
                    }
                },
                "renderer": {
                    "name": "renderer",
                    "getSignature": {
                        "name": "renderer",
                        "type": "",
                        "returnType": "Renderer2",
                        "line": 47
                    }
                },
                "documentEl": {
                    "name": "documentEl",
                    "getSignature": {
                        "name": "documentEl",
                        "type": "",
                        "returnType": "HTMLElement",
                        "line": 51
                    }
                },
                "documentHead": {
                    "name": "documentHead",
                    "getSignature": {
                        "name": "documentHead",
                        "type": "",
                        "returnType": "HTMLElement",
                        "line": 55
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TranslocoHttpLoader",
            "id": "injectable-TranslocoHttpLoader-90bb7393ef2735a587b3240f38387e1a7b6d9a5b1dcd3e0f24795559ebc60be7dfa5a91535011bc9a04b9f3ecec1965ef91ee00314b773631c585cd2082ac7cc",
            "file": "src/app/core/services/transloco-loader.service.ts",
            "properties": [
                {
                    "name": "http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getTranslation",
                    "args": [
                        {
                            "name": "lang",
                            "type": "LANGUAGE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "LANGUAGE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { inject, Injectable } from '@angular/core';\r\nimport { Translation, TranslocoLoader } from '@ngneat/transloco';\r\nimport { LANGUAGE } from 'src/app/constants';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class TranslocoHttpLoader implements TranslocoLoader {\r\n  private http = inject(HttpClient);\r\n\r\n  getTranslation(lang: LANGUAGE) {\r\n    return this.http.get<Translation>(`/assets/i18n/${lang}.json`);\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ValidationService",
            "id": "injectable-ValidationService-ba2246f9c88d90e0931721aef245c7e38548f622995b8492e21378cd3525d54086e3c5c7aef342ad1b4a03ccdf692aa88421c340e40e0b00bfad02774cb6a864",
            "file": "src/app/core/services/validation.service.ts",
            "properties": [
                {
                    "name": "#validationMessages",
                    "defaultValue": "{\r\n    [VALIDATION_ERROR.required]: () => this.getTranslation(VALIDATION_ERROR.required),\r\n    [VALIDATION_ERROR.minlength]: (control: AbstractControl) =>\r\n      this.getTranslation(VALIDATION_ERROR.minlength, control),\r\n    [VALIDATION_ERROR.maxlength]: (control: AbstractControl) =>\r\n      this.getTranslation(VALIDATION_ERROR.maxlength, control),\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#validationStatusType",
                    "defaultValue": "{\r\n    [VALIDATION_ERROR.required]: () => 'error',\r\n    [VALIDATION_ERROR.minlength]: () => 'error',\r\n    [VALIDATION_ERROR.maxlength]: () => 'error',\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getTranslation",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isControlInvalid",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateControlStatus",
                    "args": [
                        {
                            "name": "control",
                            "type": "ControlType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "ControlType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateField",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateStatus",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "NzValidateStatus",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { AbstractControl, FormArray, FormGroup } from '@angular/forms';\r\nimport { TranslocoService } from '@ngneat/transloco';\r\nimport { NzValidateStatus } from 'ng-zorro-antd/core/types';\r\nimport { VALIDATION_ERROR } from 'src/app/constants';\r\nimport { ControlType } from 'src/app/typings';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ValidationService {\r\n  #validationMessages = {\r\n    [VALIDATION_ERROR.required]: () => this.getTranslation(VALIDATION_ERROR.required),\r\n    [VALIDATION_ERROR.minlength]: (control: AbstractControl) =>\r\n      this.getTranslation(VALIDATION_ERROR.minlength, control),\r\n    [VALIDATION_ERROR.maxlength]: (control: AbstractControl) =>\r\n      this.getTranslation(VALIDATION_ERROR.maxlength, control),\r\n  };\r\n\r\n  #validationStatusType = {\r\n    [VALIDATION_ERROR.required]: () => 'error',\r\n    [VALIDATION_ERROR.minlength]: () => 'error',\r\n    [VALIDATION_ERROR.maxlength]: () => 'error',\r\n  };\r\n\r\n  constructor(private translocoService: TranslocoService) {}\r\n\r\n  validateStatus(control: AbstractControl): NzValidateStatus {\r\n    if (control?.valid && control?.dirty) return 'success';\r\n\r\n    if (control?.errors && control?.dirty) {\r\n      const controlKeys = Object.keys(control?.errors ? control?.errors : {});\r\n\r\n      const messages = Object.values(VALIDATION_ERROR).reduce((arr, error) => {\r\n        if (controlKeys.includes(VALIDATION_ERROR[error])) {\r\n          arr.push(this.#validationStatusType[error]());\r\n        }\r\n        return arr;\r\n      }, new Array<string>());\r\n\r\n      return messages.join('. ') as NzValidateStatus;\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  validateField(control: AbstractControl): string {\r\n    if (!control?.invalid || !control?.dirty) return '';\r\n\r\n    const controlErrorKeys = Object.keys(control?.errors ? control?.errors : {});\r\n\r\n    const errorMessages = Object.values(VALIDATION_ERROR).reduce((arr, error) => {\r\n      if (controlErrorKeys.includes(VALIDATION_ERROR[error])) {\r\n        arr.push(this.#validationMessages[error](control));\r\n      }\r\n      return arr;\r\n    }, new Array<string>());\r\n\r\n    return errorMessages.join('. ');\r\n  }\r\n\r\n  updateControlStatus(control: ControlType): void {\r\n    if (control instanceof FormGroup || control instanceof FormArray) {\r\n      Object.values(control.controls).forEach((innerControl) => {\r\n        this.updateControlStatus(innerControl);\r\n      });\r\n    } else {\r\n      if (control.invalid) {\r\n        control.markAsDirty();\r\n        control.updateValueAndValidity({ onlySelf: true });\r\n      }\r\n    }\r\n  }\r\n\r\n  isControlInvalid(control: AbstractControl): boolean {\r\n    return control.dirty && control.invalid;\r\n  }\r\n\r\n  private getTranslation(key: string, control?: AbstractControl): string {\r\n    const translation = this.translocoService.translate(`validation.${key}`);\r\n\r\n    if (control) {\r\n      return `${translation}: \r\n         ${control.getError(key).requiredLength}`;\r\n    }\r\n\r\n    return translation;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translocoService",
                        "type": "TranslocoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "translocoService",
                        "type": "TranslocoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "SubmitDirective",
            "id": "directive-SubmitDirective-0b2d198c6bd48e040654b19b931e12c2a54e8a3c095e6c0cbd48aec33ba7299107b7ca70c4d5fde3b84a53af863786e181847e06f62e3513bc6fc7ae63dad19a",
            "file": "src/app/shared/directives/submit.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostListener, input, output } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[siliSubmit]',\r\n  standalone: true,\r\n})\r\nexport class SubmitDirective {\r\n  stopTrigger = input<boolean>();\r\n  enterTrigger = output<void>();\r\n\r\n  @HostListener('document:keydown.enter', ['$event'])\r\n  handleKeyDown(): void {\r\n    this.enterTrigger.emit();\r\n  }\r\n}\r\n",
            "selector": "[siliSubmit]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:keydown.enter",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12
                }
            ],
            "propertiesClass": [
                {
                    "name": "enterTrigger",
                    "defaultValue": "output<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "stopTrigger",
                    "defaultValue": "input<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methodsClass": [
                {
                    "name": "handleKeyDown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:keydown.enter', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "extends": []
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-81a3219e47bfbc4bfd3547b0f890b1fe190c07155b89daa146f5be632572c30f0d3f4ecd6bbcc8f4ce58c6b6685dea1dd2fb549d6c27d45febdc287057a322c0",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "DestroyService",
                    "type": "injectable"
                }
            ],
            "selector": "sili-root",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-progress\n  [ariaLabel]=\"'progress'\"\n  [color]=\"statusColor$ | async\"\n  [spinner]=\"false\"\n  [thick]=\"true\"\n></ng-progress>\n<router-outlet></router-outlet>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "progress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgProgressComponent",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "NgProgressComponent"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "statusColor$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "initProgress",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "AuthLayoutComponent",
                    "type": "component"
                },
                {
                    "name": "DashboardLayoutModule",
                    "type": "module"
                },
                {
                    "name": "NgProgressModule",
                    "type": "module"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AsyncPipe } from '@angular/common';\r\nimport { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { NgProgressComponent, NgProgressModule } from 'ngx-progressbar';\r\nimport { map, Observable, takeUntil } from 'rxjs';\r\n\r\nimport { DestroyService, ProgressService, ThemeService } from './core/services';\r\nimport { AuthLayoutComponent, DashboardLayoutModule } from './layout';\r\n\r\n@Component({\r\n  selector: 'sili-root',\r\n  standalone: true,\r\n  providers: [DestroyService],\r\n  imports: [RouterOutlet, AuthLayoutComponent, DashboardLayoutModule, NgProgressModule, AsyncPipe],\r\n  template: `\r\n    <ng-progress\r\n      [ariaLabel]=\"'progress'\"\r\n      [color]=\"statusColor$ | async\"\r\n      [spinner]=\"false\"\r\n      [thick]=\"true\"\r\n    ></ng-progress>\r\n    <router-outlet></router-outlet>\r\n  `,\r\n})\r\nexport class AppComponent implements OnInit, AfterViewInit {\r\n  @ViewChild(NgProgressComponent) progress: NgProgressComponent;\r\n\r\n  statusColor$: Observable<string>;\r\n\r\n  constructor(\r\n    private progressService: ProgressService,\r\n    private destroy$: DestroyService,\r\n    private themeService: ThemeService,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.statusColor$ = this.themeService.primaryColor$;\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.initProgress();\r\n  }\r\n\r\n  private initProgress(): void {\r\n    this.progressService.status$\r\n      .pipe(\r\n        map((status) => {\r\n          if (status) {\r\n            this.progress.start();\r\n          } else {\r\n            this.progress.complete();\r\n          }\r\n        }),\r\n        takeUntil(this.destroy$),\r\n      )\r\n      .subscribe();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "progressService",
                        "type": "ProgressService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "destroy$",
                        "type": "DestroyService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "progressService",
                        "type": "ProgressService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "destroy$",
                        "type": "DestroyService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "AfterViewInit"
            ]
        },
        {
            "name": "AuthLayoutComponent",
            "id": "component-AuthLayoutComponent-9839466976b24731fbbd2a788291f66496ce396b55d618c36beb7d767ee8d983c289d38bb52342571877ac8e4d46062acd4ecfbcf645bd087f075d65638140e3",
            "file": "src/app/layout/auth-layout/auth-layout.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "DestroyService",
                    "type": "injectable"
                }
            ],
            "selector": "sili-auth-layout",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./auth-layout.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "brands",
                    "defaultValue": "signal<typeof BRAND>(BRAND)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "currentLang$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<LANGUAGE>",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "currentTheme$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ThemeType>",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "isTooltip",
                    "defaultValue": "signal<boolean>(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "langEmit$",
                    "defaultValue": "new Subject<LANGUAGE>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "langList$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<LanguageItem[]>",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "themeEmit$",
                    "defaultValue": "new Subject<THEME>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "themeList$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ThemeItem[]>",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [
                {
                    "name": "initLang",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "initTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDropdown",
                    "args": [
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectLang",
                    "args": [
                        {
                            "name": "selectedLang",
                            "type": "LANGUAGE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selectedLang",
                            "type": "LANGUAGE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectTheme",
                    "args": [
                        {
                            "name": "selectedTheme",
                            "type": "THEME",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selectedTheme",
                            "type": "THEME",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "TranslocoDirective",
                    "type": "directive"
                },
                {
                    "name": "SvgIconComponent",
                    "type": "component"
                },
                {
                    "name": "NzFlexModule",
                    "type": "module"
                },
                {
                    "name": "CircleButtonComponent",
                    "type": "component"
                },
                {
                    "name": "NgFor"
                },
                {
                    "name": "NzDropDownModule",
                    "type": "module"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "UpperCasePipe",
                    "type": "pipe"
                },
                {
                    "name": "NgIf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AsyncPipe, NgFor, NgIf, UpperCasePipe } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, OnInit, signal } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { TranslocoDirective } from '@ngneat/transloco';\r\nimport { NzDropDownModule } from 'ng-zorro-antd/dropdown';\r\nimport { NzFlexModule } from 'ng-zorro-antd/flex';\r\nimport { Observable, Subject, switchMap, takeUntil } from 'rxjs';\r\nimport { BRAND, LANGUAGE, THEME } from 'src/app/constants';\r\nimport { DestroyService, LanguageService, ThemeService } from 'src/app/core/services';\r\nimport { CircleButtonComponent, SvgIconComponent } from 'src/app/shared/components';\r\nimport { LanguageItem, ThemeItem, ThemeType } from 'src/app/typings';\r\n\r\n@Component({\r\n  selector: 'sili-auth-layout',\r\n  standalone: true,\r\n  imports: [\r\n    RouterOutlet,\r\n    TranslocoDirective,\r\n    SvgIconComponent,\r\n    NzFlexModule,\r\n    CircleButtonComponent,\r\n    NgFor,\r\n    NzDropDownModule,\r\n    AsyncPipe,\r\n    UpperCasePipe,\r\n    NgIf,\r\n  ],\r\n  templateUrl: './auth-layout.component.html',\r\n  styleUrl: './auth-layout.component.less',\r\n  providers: [DestroyService],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AuthLayoutComponent implements OnInit {\r\n  brands = signal<typeof BRAND>(BRAND);\r\n  isTooltip = signal<boolean>(true);\r\n\r\n  currentLang$: Observable<LANGUAGE>;\r\n  currentTheme$: Observable<ThemeType>;\r\n  langList$: Observable<LanguageItem[]>;\r\n  themeList$: Observable<ThemeItem[]>;\r\n\r\n  readonly langEmit$ = new Subject<LANGUAGE>();\r\n  readonly themeEmit$ = new Subject<THEME>();\r\n\r\n  constructor(\r\n    private languageService: LanguageService,\r\n    private themeService: ThemeService,\r\n    private destroy$: DestroyService,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.initLang();\r\n    this.initTheme();\r\n  }\r\n\r\n  onSelectLang(selectedLang: LANGUAGE): void {\r\n    this.langEmit$.next(selectedLang);\r\n  }\r\n\r\n  onSelectTheme(selectedTheme: THEME): void {\r\n    this.themeEmit$.next(selectedTheme);\r\n  }\r\n\r\n  onDropdown(state: boolean): void {\r\n    this.isTooltip.set(!state);\r\n  }\r\n\r\n  private initLang(): void {\r\n    this.currentLang$ = this.languageService.currentLang$;\r\n    this.langList$ = this.languageService.langItems$;\r\n\r\n    this.langEmit$\r\n      .pipe(\r\n        switchMap((lang) => this.languageService.onChangeLang$(lang)),\r\n        takeUntil(this.destroy$),\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  private initTheme(): void {\r\n    this.currentTheme$ = this.themeService.currentTheme$;\r\n    this.themeList$ = this.themeService.themeList$;\r\n\r\n    this.themeEmit$\r\n      .pipe(\r\n        switchMap((theme) => this.themeService.loadTheme$(theme)),\r\n        takeUntil(this.destroy$),\r\n      )\r\n      .subscribe();\r\n  }\r\n}\r\n",
            "styleUrl": "./auth-layout.component.less",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "destroy$",
                        "type": "DestroyService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "destroy$",
                        "type": "DestroyService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *transloco=\"let t\">\r\n    <section class=\"auth-layout\">\r\n        <aside class=\"aside\">\r\n           <div class=\"container\">\r\n                <sili-svg-icon \r\n                    [size]=\"50\"\r\n                    [name]=\"'sili'\"\r\n                    [gap]=\"20\"\r\n                >\r\n                    <span class=\"brand\">\r\n                        {{brands().sili}}\r\n                    </span>\r\n                </sili-svg-icon>\r\n    \r\n                <h2 class=\"description\">\r\n                    {{t('auth.layout_description')}}\r\n                </h2>\r\n           </div>\r\n        </aside>\r\n        \r\n        <main class=\"main\">\r\n            <router-outlet></router-outlet>\r\n            \r\n            <div class=\"language\">\r\n                <sili-circle-button \r\n                    nz-dropdown \r\n                    [nzDropdownMenu]=\"langMenu\"\r\n                    [nzTrigger]=\"'click'\"\r\n                    [ariaLabel]=\"'language'\"\r\n                    [tooltipText]=\" t('auth.actions.lang')\"\r\n                    [isTooltip]=\"isTooltip()\"\r\n                    (nzVisibleChange)=\"onDropdown($event)\"\r\n                >\r\n                    {{currentLang$ | async | uppercase}}\r\n                </sili-circle-button>\r\n    \r\n                <sili-circle-button \r\n                    nz-dropdown \r\n                    [nzDropdownMenu]=\"themeMenu\"\r\n                    [nzTrigger]=\"'click'\"\r\n                    [ariaLabel]=\"'theme'\"\r\n                    [tooltipText]=\"t('auth.actions.theme')\"\r\n                    [isTooltip]=\"isTooltip()\"\r\n                    (nzVisibleChange)=\"onDropdown($event)\"\r\n                >\r\n                    <sili-svg-icon [name]=\"'star'\"></sili-svg-icon>\r\n                </sili-circle-button>\r\n            </div>\r\n        </main>\r\n    </section>\r\n    \r\n    <nz-dropdown-menu #langMenu=\"nzDropdownMenu\">\r\n        <ul \r\n            nz-menu \r\n            nzSelectable\r\n        >\r\n            @for (item of langList$ | async; track $index) {\r\n                <li \r\n                    nz-menu-item \r\n                    [nzSelected]=\"item.isSelected\"\r\n                    (click)=\"onSelectLang(item.name)\"\r\n                >\r\n                    {{item.name | uppercase}}\r\n                </li>\r\n            }\r\n        </ul>\r\n    </nz-dropdown-menu>\r\n    \r\n    <nz-dropdown-menu #themeMenu=\"nzDropdownMenu\">\r\n        <ul \r\n            nz-menu \r\n            nzSelectable\r\n        >\r\n            @for (item of themeList$ | async; track $index) {\r\n                <li \r\n                    nz-menu-item \r\n                    [nzSelected]=\"item.isSelected\"\r\n                    (click)=\"onSelectTheme(item.theme)\"\r\n                >\r\n                    {{t(item.name)}}\r\n                </li>\r\n            }\r\n        </ul>\r\n    </nz-dropdown-menu>\r\n</ng-container>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-86e2311c54fbca7431c12e070d0fd5b0ebe343eec0553a392f182ba0e04a8f86613233d26ee47718fd0e7a65078f580c76a1fcc928ce55de81193d6618025bc4",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 798,
                            "end": 811,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 799,
                                "end": 807,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 35,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 49,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 51
                    }
                }
            }
        },
        {
            "name": "CircleButtonComponent",
            "id": "component-CircleButtonComponent-bba6a375bc06f8dc571983da203b1fbd2ff29af56ca9cf97294e0be949825297bf831dde1516b0b2cc662f673c6797b8c4f0040910e5c23345dfe3cc1eb985f2",
            "file": "src/app/shared/components/circle-button/circle-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sili-circle-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./circle-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "input<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "blocked",
                    "defaultValue": "input<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "clicked",
                    "defaultValue": "output<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "danger",
                    "defaultValue": "input<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "ghost",
                    "defaultValue": "input<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isTooltip",
                    "defaultValue": "input<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "loading",
                    "defaultValue": "input<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "size",
                    "defaultValue": "input<NzSizeLDSType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "tooltipArrow",
                    "defaultValue": "input<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "tooltipMouseEnterDelay",
                    "defaultValue": "input<number>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "tooltipText",
                    "defaultValue": "input<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "tooltipTitle",
                    "defaultValue": "computed(() => (this.isTooltip() ? this.tooltipText() : null))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "tooltipTrigger",
                    "defaultValue": "input<NzTooltipTrigger>('hover')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "type",
                    "defaultValue": "input<NzButtonType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NzButtonModule",
                    "type": "module"
                },
                {
                    "name": "NzToolTipModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, computed, input, output } from '@angular/core';\r\nimport { NzButtonModule, NzButtonType } from 'ng-zorro-antd/button';\r\nimport { NzSizeLDSType } from 'ng-zorro-antd/core/types';\r\nimport { NzToolTipModule, NzTooltipTrigger } from 'ng-zorro-antd/tooltip';\r\n\r\n@Component({\r\n  selector: 'sili-circle-button',\r\n  standalone: true,\r\n  imports: [NzButtonModule, NzToolTipModule],\r\n  templateUrl: './circle-button.component.html',\r\n  styleUrl: './circle-button.component.less',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CircleButtonComponent {\r\n  size = input<NzSizeLDSType>();\r\n  danger = input<boolean>();\r\n  blocked = input<boolean>();\r\n  ghost = input<boolean>();\r\n  loading = input<boolean>();\r\n  type = input<NzButtonType>();\r\n  ariaLabel = input<string>();\r\n  tooltipText = input<string>();\r\n  tooltipTrigger = input<NzTooltipTrigger>('hover');\r\n  tooltipArrow = input<boolean>();\r\n  tooltipMouseEnterDelay = input<number>(1);\r\n  isTooltip = input<boolean>(false);\r\n  clicked = output<void>();\r\n\r\n  tooltipTitle = computed(() => (this.isTooltip() ? this.tooltipText() : null));\r\n}\r\n",
            "styleUrl": "./circle-button.component.less",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<button \r\n    nz-button\r\n    nz-tooltip\r\n    [nzTooltipTitle]=\"tooltipTitle()\"\r\n    [nzTooltipTrigger]=\"tooltipTrigger()\"\r\n    [nzTooltipArrowPointAtCenter]=\"tooltipArrow()\"\r\n    [nzTooltipMouseEnterDelay]=\"tooltipMouseEnterDelay()\"\r\n    [nzType]=\"type()\"\r\n    [nzShape]=\"'circle'\"\r\n    [nzSize]=\"size()\"\r\n    [nzDanger]=\"danger()\"\r\n    [disabled]=\"blocked()\"\r\n    [nzGhost]=\"ghost()\"\r\n    [nzLoading]=\"loading()\"\r\n    [attr.aria-label]=\"ariaLabel()\"\r\n    (click)=\"clicked.emit()\"\r\n>\r\n    <ng-content></ng-content>\r\n</button>"
        },
        {
            "name": "DashboardHeaderComponent",
            "id": "component-DashboardHeaderComponent-96543ac583f42654b7cbd89c2cee54da99fc53759b8348a99dff5122f06c6e300d749ce5cbef224ad7b62c18031ada25d3e82054d1807d2d1db5f3788556d55c",
            "file": "src/app/layout/dashboard-layout/components/dashboard-header/dashboard-header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sili-dashboard-header",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dashboard-header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "brands",
                    "defaultValue": "signal<typeof BRAND>(BRAND)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, signal } from '@angular/core';\r\nimport { BRAND } from 'src/app/constants';\r\n\r\n@Component({\r\n  selector: 'sili-dashboard-header',\r\n  templateUrl: './dashboard-header.component.html',\r\n  styleUrl: './dashboard-header.component.less',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class DashboardHeaderComponent {\r\n  readonly brands = signal<typeof BRAND>(BRAND);\r\n}\r\n",
            "styleUrl": "./dashboard-header.component.less",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<nz-header \r\n    nz-flex\r\n    [nzAlign]=\"'center'\"\r\n    [nzJustify]=\"'space-between'\"\r\n    class=\"header\"\r\n>\r\n    <article class=\"logo\">\r\n        <sili-svg-icon \r\n            [size]=\"35\"\r\n            [name]=\"'sili'\"\r\n            [gap]=\"16\"\r\n        >\r\n            <span class=\"brand\">\r\n                {{brands().sili}}\r\n            </span>\r\n        </sili-svg-icon>\r\n    </article>\r\n</nz-header>\r\n\r\n"
        },
        {
            "name": "DashboardLayoutComponent",
            "id": "component-DashboardLayoutComponent-917344a354e17bbb204af9f50358f1946b972880292ab5702b2a1580e88246092fa6e303753daeb3e7026cc192aca374d6585cf7a51751a95def3b49e5938e79",
            "file": "src/app/layout/dashboard-layout/dashboard-layout.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "DashboardLayoutService",
                    "type": "injectable"
                },
                {
                    "name": "DestroyService",
                    "type": "injectable"
                }
            ],
            "selector": "sili-dashboard-layout",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dashboard-layout.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menuItems$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<DashboardMenuItem[]>",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectMenuItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { DestroyService } from 'src/app/core/services';\r\nimport { DashboardMenuItem } from 'src/app/typings';\r\n\r\nimport { DashboardLayoutService } from './services';\r\n\r\n@Component({\r\n  selector: 'sili-dashboard-layout',\r\n  templateUrl: './dashboard-layout.component.html',\r\n  styleUrl: './dashboard-layout.component.less',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [DashboardLayoutService, DestroyService],\r\n})\r\nexport class DashboardLayoutComponent implements OnInit {\r\n  menuItems$: Observable<DashboardMenuItem[]>;\r\n\r\n  constructor(private dashboardLayoutService: DashboardLayoutService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.menuItems$ = this.dashboardLayoutService.menuItems$;\r\n  }\r\n\r\n  onSelectMenuItem(): void {}\r\n}\r\n",
            "styleUrl": "./dashboard-layout.component.less",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dashboardLayoutService",
                        "type": "DashboardLayoutService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "dashboardLayoutService",
                        "type": "DashboardLayoutService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<nz-layout class=\"dashboard-layout\">\r\n    <sili-dashboard-header></sili-dashboard-header>\r\n\r\n    <sili-dashboard-main\r\n        [menuItems]=\"menuItems$ | async\"\r\n        (clicked)=\"onSelectMenuItem()\">\r\n    </sili-dashboard-main>\r\n</nz-layout>"
        },
        {
            "name": "DashboardMainComponent",
            "id": "component-DashboardMainComponent-55d586c3397cd12a8441a181d77d29da52c51f3c8d5193af966bf211ec61b325a3805c7c8e214cdbaa4eae84a8c80b40146b1b1ff8bbd53981f8fd1ccd7d3768",
            "file": "src/app/layout/dashboard-layout/components/dashboard-main/dashboard-main.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sili-dashboard-main",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dashboard-main.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "clicked",
                    "defaultValue": "output<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "menuItems",
                    "defaultValue": "input<DashboardMenuItem[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, input, output } from '@angular/core';\r\nimport { DashboardMenuItem } from 'src/app/typings';\r\n\r\n@Component({\r\n  selector: 'sili-dashboard-main',\r\n  templateUrl: './dashboard-main.component.html',\r\n  styleUrl: './dashboard-main.component.less',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class DashboardMainComponent {\r\n  menuItems = input<DashboardMenuItem[]>();\r\n  clicked = output<void>();\r\n}\r\n",
            "styleUrl": "./dashboard-main.component.less",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<nz-layout class=\"main\">\r\n    <nz-sider \r\n        [nzWidth]=\"'250px'\"\r\n        [nzCollapsible]=\"true\"\r\n        class=\"sider\"\r\n    >\r\n        <ul \r\n            nz-menu \r\n            nzMode=\"inline\"\r\n        >\r\n            @for (item of menuItems(); track item.route) {\r\n                <li \r\n                    nz-menu-item  \r\n                    nzMatchRouter\r\n                    [nzDisabled]=\"item.disabled\"\r\n                >\r\n                    <a \r\n                        [routerLink]=\"['/dashboard', item.route]\"\r\n                        (click)=\"clicked.emit()\"\r\n                    >\r\n                        <span \r\n                            nz-icon \r\n                            [nzType]=\"item.icon\">\r\n                        </span>\r\n                        <span>\r\n                            {{item.title | transloco}}\r\n                        </span>\r\n                    </a>\r\n                </li>\r\n            }\r\n        </ul>\r\n    </nz-sider>\r\n\r\n    <nz-content class=\"content\">\r\n        <router-outlet></router-outlet>\r\n    </nz-content>\r\n</nz-layout>"
        },
        {
            "name": "DefaultButtonComponent",
            "id": "component-DefaultButtonComponent-0c46a50d42a6a70d72d76f217461bdc362b41159ec95fbe130752a05e413f727e4c330bcc6968079f9e7020ca595ed37a206e8916149ce9242bbeac43f2a518f",
            "file": "src/app/shared/components/default-button/default-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sili-default-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./default-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "block",
                    "defaultValue": "input<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "blocked",
                    "defaultValue": "input<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "clicked",
                    "defaultValue": "output<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "danger",
                    "defaultValue": "input<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "ghost",
                    "defaultValue": "input<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "loading",
                    "defaultValue": "input<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "mode",
                    "defaultValue": "input<NzButtonType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "size",
                    "defaultValue": "input<NzSizeLDSType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NzButtonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, input, output } from '@angular/core';\r\nimport { NzButtonModule, NzButtonType } from 'ng-zorro-antd/button';\r\nimport { NzSizeLDSType } from 'ng-zorro-antd/core/types';\r\n\r\n@Component({\r\n  selector: 'sili-default-button',\r\n  standalone: true,\r\n  imports: [NzButtonModule],\r\n  templateUrl: './default-button.component.html',\r\n  styleUrl: './default-button.component.less',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class DefaultButtonComponent {\r\n  size = input<NzSizeLDSType>();\r\n  danger = input<boolean>();\r\n  blocked = input<boolean>();\r\n  ghost = input<boolean>();\r\n  loading = input<boolean>();\r\n  mode = input<NzButtonType>();\r\n  block = input<boolean>();\r\n  clicked = output<void>();\r\n}\r\n",
            "styleUrl": "./default-button.component.less",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<button \r\n    nz-button\r\n    [nzType]=\"mode()\"\r\n    [nzShape]=\"'round'\"\r\n    [nzSize]=\"size()\"\r\n    [nzDanger]=\"danger()\"\r\n    [disabled]=\"blocked()\"\r\n    [nzGhost]=\"ghost()\"\r\n    [nzLoading]=\"loading()\"\r\n    [nzBlock]=\"block()\"\r\n    (click)=\"clicked.emit()\"\r\n>\r\n    <ng-content></ng-content>\r\n</button>"
        },
        {
            "name": "DefaultInputComponent",
            "id": "component-DefaultInputComponent-f3184fd045f9b83ad8e269eea5f90d72f541351055cce7221c626e96b39fc882f57cc93b43bb2c4c84fb5d9b19feac6c7d3cb8299676af8fc175ac564530bbe5",
            "file": "src/app/shared/components/default-input/default-input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => DefaultInputComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "sili-default-input",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./default-input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "autocomplete",
                    "defaultValue": "input<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "disabled",
                    "defaultValue": "signal<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "isFeedback",
                    "defaultValue": "input<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "label",
                    "defaultValue": "input<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "labelWrap",
                    "defaultValue": "input<boolean>(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "message",
                    "defaultValue": "input<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FunctionType",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FunctionType",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "required",
                    "defaultValue": "input<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "size",
                    "defaultValue": "input<NzSizeLDSType>('large')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "status",
                    "defaultValue": "input<NzValidateStatus>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "type",
                    "defaultValue": "input<string>('text')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "value",
                    "defaultValue": "model<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "onModelChange",
                    "args": [
                        {
                            "name": "$event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "FunctionType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "FunctionType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "FunctionType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "FunctionType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NzFormModule",
                    "type": "module"
                },
                {
                    "name": "NzInputModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  forwardRef,\r\n  input,\r\n  model,\r\n  signal,\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { NzSizeLDSType, NzValidateStatus } from 'ng-zorro-antd/core/types';\r\nimport { NzFormModule } from 'ng-zorro-antd/form';\r\nimport { NzInputModule } from 'ng-zorro-antd/input';\r\nimport { FunctionType } from 'src/app/typings';\r\n\r\n@Component({\r\n  selector: 'sili-default-input',\r\n  standalone: true,\r\n  imports: [NzFormModule, NzInputModule, FormsModule],\r\n  templateUrl: './default-input.component.html',\r\n  styleUrl: './default-input.component.less',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => DefaultInputComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class DefaultInputComponent implements ControlValueAccessor {\r\n  value = model<string>();\r\n  required = input<boolean>();\r\n  label = input<string>();\r\n  labelWrap = input<boolean>(true);\r\n  size = input<NzSizeLDSType>('large');\r\n  status = input<NzValidateStatus>('');\r\n  isFeedback = input<boolean>();\r\n  message = input<string>();\r\n  type = input<string>('text');\r\n  autocomplete = input<string>();\r\n  disabled = signal<boolean>(false);\r\n\r\n  onChange: FunctionType = () => {};\r\n  onTouched: FunctionType = () => {};\r\n\r\n  writeValue(value: string): void {\r\n    this.value.set(value);\r\n  }\r\n\r\n  registerOnChange(fn: FunctionType): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: FunctionType): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(state: boolean): void {\r\n    this.disabled.set(state);\r\n  }\r\n\r\n  onModelChange($event: string): void {\r\n    this.onChange($event.toString().trim());\r\n  }\r\n}\r\n",
            "styleUrl": "./default-input.component.less",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<nz-form-item>\r\n    <nz-form-label\r\n        [nzLabelAlign]=\"'left'\"\r\n        [nzXs]=\"24\"\r\n        [nzLabelWrap]=\"labelWrap()\"\r\n        [nzRequired]=\"required()\" \r\n        [nzFor]=\"label()\"\r\n    >\r\n       <span class=\"label\">{{label()}}</span>\r\n    </nz-form-label>\r\n    <nz-form-control \r\n        [nzHasFeedback]=\"isFeedback()\"\r\n        [nzValidateStatus]=\"status()\"\r\n        [nzErrorTip]=\"message()\"\r\n        [nzValidatingTip]=\"message()\"\r\n        [nzWarningTip]=\"message()\"\r\n        [nzSuccessTip]=\"message()\"\r\n    >\r\n        <nz-input-group \r\n            [nzSize]=\"size()\"\r\n            [nzSuffix]=\"suffix\"\r\n        >\r\n            <input \r\n                nz-input \r\n                [type]=\"type()\"\r\n                [disabled]=\"disabled()\"\r\n                [id]=\"label()\" \r\n                [(ngModel)]=\"value\"\r\n                [autocomplete]=\"autocomplete()\"\r\n                (ngModelChange)=\"onModelChange($event)\"\r\n            />\r\n        </nz-input-group>\r\n\r\n        <ng-template #suffix>\r\n            <ng-content></ng-content>\r\n        </ng-template>\r\n    </nz-form-control>\r\n</nz-form-item>"
        },
        {
            "name": "ErrorComponent",
            "id": "component-ErrorComponent-7a8daa1154736fabf9be5b0ca459626a69c30bd7c6b0af5342fa55545f0a159222cc1a2a2efffbcb7e8237f8c59053f8e0983a1e7adc6af6e5d73682c3b47c46",
            "file": "src/app/modules/error/error.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sili-error",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./error.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'sili-error',\r\n  templateUrl: './error.component.html',\r\n  styleUrl: './error.component.less',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ErrorComponent {}\r\n",
            "styleUrl": "./error.component.less",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>error works!</p>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-cad94b233ec8e80ceb541e7972c5f9737e08237b4e137112f3987ca48ee0cce5c0d57798d41daa5d4d24d6bdbb2df1606ab68cca2aa0a1785e38f99f3cac0729",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-eb5d4f6816e8f40ef78917144acf8e1bce7d26c59e43a04387c2c74edac766f86b5082e0633e2e8442eed964548730813ff45095ac3e98e59e3c3dd9d627a918",
            "file": "src/app/modules/auth/page/login/login.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "DestroyService",
                    "type": "injectable"
                }
            ],
            "selector": "sili-login",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "eye",
                    "defaultValue": "signal<NZ_ICONS_TYPE>('eye-invisible')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "loginForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup<AuthLoginForm>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "passwordType",
                    "defaultValue": "signal<string>('password')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "controlMessage",
                    "args": [
                        {
                            "name": "controlName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "controlName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "controlStatus",
                    "args": [
                        {
                            "name": "controlName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "NzValidateStatus",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "controlName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initLoginForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLoginError$",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onLoginSuccess",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleEye",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  OnInit,\r\n  signal,\r\n} from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { NzValidateStatus } from 'ng-zorro-antd/core/types';\r\nimport { catchError, EMPTY, map, Observable, takeUntil, tap } from 'rxjs';\r\nimport { AUTH_QUERY } from 'src/app/api/constants';\r\nimport { BaseApiService } from 'src/app/api/services';\r\nimport { AuthLoginData, IAuthLoginResponse } from 'src/app/api/typings';\r\nimport {\r\n  DestroyService,\r\n  NavigationService,\r\n  StorageService,\r\n  ValidationService,\r\n} from 'src/app/core/services';\r\nimport { AuthLoginForm, NZ_ICONS_TYPE } from 'src/app/typings';\r\n\r\n@Component({\r\n  selector: 'sili-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrl: './login.component.less',\r\n  providers: [DestroyService],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  loginForm: FormGroup<AuthLoginForm>;\r\n  eye = signal<NZ_ICONS_TYPE>('eye-invisible');\r\n  passwordType = signal<string>('password');\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private validationService: ValidationService,\r\n    private baseApiService: BaseApiService,\r\n    private destroy$: DestroyService,\r\n    private storageService: StorageService,\r\n    private navigationService: NavigationService,\r\n    private cdr: ChangeDetectorRef,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.initLoginForm();\r\n  }\r\n\r\n  toggleEye(): void {\r\n    const eyeState = this.eye() === 'eye' ? 'eye-invisible' : 'eye';\r\n\r\n    const passwordType = this.eye() === 'eye' ? 'password' : 'text';\r\n\r\n    this.eye.set(eyeState);\r\n    this.passwordType.set(passwordType);\r\n  }\r\n\r\n  controlMessage(controlName: keyof AuthLoginForm): string {\r\n    return this.validationService.validateField(this.loginForm.get(controlName));\r\n  }\r\n\r\n  controlStatus(controlName: keyof AuthLoginForm): NzValidateStatus {\r\n    return this.validationService.validateStatus(this.loginForm.get(controlName));\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.loginForm.valid) {\r\n      this.loginForm.disable();\r\n\r\n      this.baseApiService\r\n        .postQuery<AuthLoginData, IAuthLoginResponse>(AUTH_QUERY.login, this.loginForm.value)\r\n        .pipe(\r\n          map((response) => response.token),\r\n          tap((token) => this.onLoginSuccess(token)),\r\n          catchError(() => this.onLoginError$()),\r\n          takeUntil(this.destroy$),\r\n        )\r\n        .subscribe();\r\n    } else {\r\n      this.validationService.updateControlStatus(this.loginForm);\r\n    }\r\n  }\r\n\r\n  private initLoginForm(): void {\r\n    this.loginForm = this.fb.group<AuthLoginForm>({\r\n      login: this.fb.control(null, [Validators.required, Validators.minLength(3)]),\r\n      password: this.fb.control(null, [Validators.required, Validators.minLength(8)]),\r\n    });\r\n  }\r\n\r\n  private onLoginError$(): Observable<never> {\r\n    this.loginForm.reset();\r\n    this.loginForm.enable();\r\n    this.cdr.markForCheck();\r\n\r\n    return EMPTY;\r\n  }\r\n\r\n  private onLoginSuccess(token: string): void {\r\n    this.storageService.token = token;\r\n    this.navigationService.onLogIn();\r\n  }\r\n}\r\n",
            "styleUrl": "./login.component.less",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "baseApiService",
                        "type": "BaseApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "destroy$",
                        "type": "DestroyService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "baseApiService",
                        "type": "BaseApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "destroy$",
                        "type": "DestroyService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<section \r\n    nz-flex \r\n    [nzAlign]=\"'center'\"\r\n    [nzJustify]=\"'center'\"\r\n    *transloco=\"let t\"\r\n    class=\"login\"\r\n>\r\n    <div class=\"container\">\r\n        <h1 nz-typography>\r\n            {{t('auth.login_title')}}\r\n        </h1>\r\n        \r\n        <nz-divider></nz-divider>\r\n\r\n        <form \r\n            siliSubmit\r\n            nz-flex \r\n            [nzVertical]=\"true\"\r\n            [formGroup]=\"loginForm\"\r\n            [stopTrigger]=\"loginForm.disabled\"\r\n            (enterTrigger)=\"onSubmit()\"\r\n        >\r\n            <sili-default-input\r\n                [required]=\"true\"\r\n                [labelWrap]=\"true\"\r\n                [isFeedback]=\"true\"\r\n                [autocomplete]=\"'username'\"\r\n                [label]=\"t('inputs.login.label')\"\r\n                [message]=\"controlMessage('login')\"\r\n                [status]=\"controlStatus('login')\"\r\n                formControlName=\"login\"\r\n            >\r\n            </sili-default-input>\r\n\r\n            <sili-default-input\r\n                [type]=\"passwordType()\"\r\n                [required]=\"true\"\r\n                [labelWrap]=\"true\"\r\n                [isFeedback]=\"true\"\r\n                [autocomplete]=\"'current-password'\"\r\n                [label]=\"t('inputs.password.label')\"\r\n                [message]=\"controlMessage('password')\"\r\n                [status]=\"controlStatus('password')\"\r\n                formControlName=\"password\"\r\n            >\r\n                <sili-svg-icon \r\n                    [name]=\"eye()\" \r\n                    [size]=\"20\"\r\n                    [cursor]=\"'pointer'\"\r\n                    [ariaLabel]=\"'password_toggle'\"\r\n                    (clicked)=\"toggleEye()\">\r\n                </sili-svg-icon>\r\n            </sili-default-input>\r\n            \r\n            <sili-default-button\r\n                [blocked]=\"loginForm.disabled\"\r\n                [loading]=\"loginForm.disabled\"\r\n                [block]=\"true\"\r\n                [mode]=\"'primary'\"\r\n                [size]=\"'large'\"\r\n                (clicked)=\"onSubmit()\"\r\n                class=\"submit\"\r\n            >\r\n                {{t('buttons.continue')}}\r\n            </sili-default-button>\r\n        </form>\r\n    </div>\r\n</section>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-d32b0f19628254ea3fc5526c4d4564ada1cc83cf936759006d90a46f5874b02a3359e331bddda20b22e74a616a6443c660602ba74dd38ebe1160759e0de6f7ba",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\n.storybook-page h2 {\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\n.storybook-page ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.storybook-page .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "RecoverComponent",
            "id": "component-RecoverComponent-c310241cb57ce7e2db67b5cfc8f4ff08e4723f64cd01597fcbe6572d5a317b724a5066da9708f61a7a15bee991349e5fc0ae93c46b6062dfb72fa9513ed2a4eb",
            "file": "src/app/modules/auth/page/recover/recover.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sili-recover",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./recover.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'sili-recover',\r\n  templateUrl: './recover.component.html',\r\n  styleUrl: './recover.component.less',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class RecoverComponent {}\r\n",
            "styleUrl": "./recover.component.less",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>recover works!</p>\r\n"
        },
        {
            "name": "SvgIconComponent",
            "id": "component-SvgIconComponent-50cf6a686419111388fed15605854bd3cf6b8096e18c884b40fe272f8e134cf1f0d5006b2fc3ddac03f2af11c410b52a375877d0f3707700ac72d564d168d3d1",
            "file": "src/app/shared/components/svg-icon/svg-icon.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sili-svg-icon",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      width: fit-content;\n      user-select: none;\n    }\n  "
            ],
            "template": "<div\n  nz-flex\n  [nzVertical]=\"false\"\n  [nzGap]=\"gap()\"\n  [nzAlign]=\"'center'\"\n  [nzJustify]=\"'center'\"\n  [ngStyle]=\"{ cursor: cursor() }\"\n  (click)=\"clicked.emit()\"\n>\n  <span\n    nz-icon\n    [attr.aria-label]=\"ariaLabel()\"\n    [nzType]=\"name()\"\n    [ngStyle]=\"{\n      fontSize: size() + 'px',\n      color: color()\n    }\"\n  >\n  </span>\n\n  <ng-content></ng-content>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "input<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "clicked",
                    "defaultValue": "output<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "color",
                    "defaultValue": "input<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "cursor",
                    "defaultValue": "input<ICONS_CURSOR_TYPE>('inherit')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "gap",
                    "defaultValue": "input<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "name",
                    "defaultValue": "input<ICONS_TYPE>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "size",
                    "defaultValue": "input<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NzIconModule",
                    "type": "module"
                },
                {
                    "name": "NgStyle"
                },
                {
                    "name": "NzFlexModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgStyle } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, input, output } from '@angular/core';\r\nimport { NzFlexModule } from 'ng-zorro-antd/flex';\r\nimport { NzIconModule } from 'ng-zorro-antd/icon';\r\nimport { ICONS_CURSOR_TYPE, ICONS_TYPE } from 'src/app/typings';\r\n\r\n@Component({\r\n  selector: 'sili-svg-icon',\r\n  standalone: true,\r\n  imports: [NzIconModule, NgStyle, NzFlexModule],\r\n  template: `\r\n    <div\r\n      nz-flex\r\n      [nzVertical]=\"false\"\r\n      [nzGap]=\"gap()\"\r\n      [nzAlign]=\"'center'\"\r\n      [nzJustify]=\"'center'\"\r\n      [ngStyle]=\"{ cursor: cursor() }\"\r\n      (click)=\"clicked.emit()\"\r\n    >\r\n      <span\r\n        nz-icon\r\n        [attr.aria-label]=\"ariaLabel()\"\r\n        [nzType]=\"name()\"\r\n        [ngStyle]=\"{\r\n          fontSize: size() + 'px',\r\n          color: color()\r\n        }\"\r\n      >\r\n      </span>\r\n\r\n      <ng-content></ng-content>\r\n    </div>\r\n  `,\r\n  styles: `\r\n    :host {\r\n      width: fit-content;\r\n      user-select: none;\r\n    }\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SvgIconComponent {\r\n  size = input<number>();\r\n  color = input<string>();\r\n  name = input<ICONS_TYPE>();\r\n  gap = input<number>();\r\n  cursor = input<ICONS_CURSOR_TYPE>('inherit');\r\n  ariaLabel = input<string>();\r\n  clicked = output<void>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      width: fit-content;\n      user-select: none;\n    }\n  \n",
            "extends": []
        }
    ],
    "modules": [
        {
            "name": "AuthModule",
            "id": "module-AuthModule-32a3f8b420fc351cd913b41358aad58ea0b5d78897b042cce9839826453198a35648a25ef52331dd04215bb6db3cd5f14d3933cb080b06a40e73220afe4b1366",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/auth/auth.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [CommonModule, AuthRoutingModule],\r\n})\r\nexport class AuthModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthRoutingModule",
            "id": "module-AuthRoutingModule-52d360a9ffbe6001c26636f94fa83cf55aaad2031b22ef960a316c4f40225d6708d60e4d64d2b1ad9644e2520a1c163d46fb9dd0b423ad61e9f9cdd36593fe54",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/auth/auth-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AUTH_ROUTE } from 'src/app/constants';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    pathMatch: 'full',\r\n    redirectTo: AUTH_ROUTE.login,\r\n  },\r\n  {\r\n    path: AUTH_ROUTE.login,\r\n    loadChildren: () => \"import('./page/login/login.module').then((m) => m.LoginModule)\",\r\n  },\r\n  {\r\n    path: AUTH_ROUTE.recover,\r\n    loadChildren: () => \"import('./page/recover/recover.module').then((m) => m.RecoverModule)\",\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AuthRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CarModule",
            "id": "module-CarModule-41864b7c242d9b7632b42a1c69e196236c73b5a0560bda287abbc45ab5ada9314e284b1138bbd7487201dff269fc37eeca0772862c121d11a6a5b1436687b5eb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/car/car.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { CarRoutingModule } from './car-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [CommonModule, CarRoutingModule],\r\n})\r\nexport class CarModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CarRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CarRoutingModule",
            "id": "module-CarRoutingModule-409675b4fd01d7d7e508c324785da058ef06f89768d4929a17614d3703e90801090d1f5de47f633a8350a7c3c39b4e5243f85943d033be9f65b9cd09176d8064",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/car/car-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class CarRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardLayoutModule",
            "id": "module-DashboardLayoutModule-43505d53e77c787107961a72eaa23caaf859c9896d40e652f6b9c4a628e64a20f158581c4e843368fbd69021d3d67af6134e41558f8d490bac5e7ade73e0ef0b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/layout/dashboard-layout/dashboard-layout.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { TranslocoModule } from '@ngneat/transloco';\r\nimport { NzFlexModule } from 'ng-zorro-antd/flex';\r\nimport { NzIconModule } from 'ng-zorro-antd/icon';\r\nimport { NzLayoutModule } from 'ng-zorro-antd/layout';\r\nimport { NzMenuModule } from 'ng-zorro-antd/menu';\r\nimport { SvgIconComponent } from 'src/app/shared/components';\r\n\r\nimport { DashboardHeaderComponent } from './components/dashboard-header/dashboard-header.component';\r\nimport { DashboardMainComponent } from './components/dashboard-main/dashboard-main.component';\r\nimport { DashboardLayoutComponent } from './dashboard-layout.component';\r\n\r\n@NgModule({\r\n  declarations: [DashboardLayoutComponent, DashboardHeaderComponent, DashboardMainComponent],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    NzLayoutModule,\r\n    NzMenuModule,\r\n    SvgIconComponent,\r\n    NzIconModule,\r\n    TranslocoModule,\r\n    NzFlexModule,\r\n  ],\r\n})\r\nexport class DashboardLayoutModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DashboardHeaderComponent"
                        },
                        {
                            "name": "DashboardLayoutComponent"
                        },
                        {
                            "name": "DashboardMainComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SvgIconComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ErrorModule",
            "id": "module-ErrorModule-8d509bedc64cd51fb87ac962cbf79f9e3833a0b5355b8d8189951198c3013927c5358b0aba6616cd5174da2bf5ff121b602bef2c5552e792ee1760624b27fbdd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/error/error.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { ErrorComponent } from './error.component';\r\nimport { ErrorRoutingModule } from './error-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [ErrorComponent],\r\n  imports: [CommonModule, ErrorRoutingModule],\r\n})\r\nexport class ErrorModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ErrorComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ErrorRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ErrorRoutingModule",
            "id": "module-ErrorRoutingModule-d48ec733c26b80a512e451a7effa4463619b07c48d11117db89a6ad572e0e5a6cec35e11a0f77c89e6bfcda012bc52922d90c4d5a0313e14e5e696409fc0335e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/error/error-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { ErrorComponent } from './error.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ErrorComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class ErrorRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FeedbackModule",
            "id": "module-FeedbackModule-91b44513175cb963ebfa27fcc92b926e2eb2625f80c818c06c08fe686b4be57e151cab5559ea68549c09458ae23e136d001c09da58b892b5332ef24c8c4ff3df",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/feedback/feedback.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { FeedbackRoutingModule } from './feedback-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [CommonModule, FeedbackRoutingModule],\r\n})\r\nexport class FeedbackModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FeedbackRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FeedbackRoutingModule",
            "id": "module-FeedbackRoutingModule-611aeb6e32be1fdc0bd2724389847e9d2f4350285147f469bfef72d2d12672fe210cd49ced61429510e52390980fc0609b467e73aa0e0b3a0bfe1462cea789c5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/feedback/feedback-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class FeedbackRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoginModule",
            "id": "module-LoginModule-c1e9746ae1931ae507755baad30ac1cbb59e81d9c49038b604f933014e4910deae88c6b22bf48649193b7565a6687f0d05ff4bfe9417f2d3e816727de8330732",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/auth/page/login/login.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { TranslocoModule } from '@ngneat/transloco';\r\nimport { NzDividerComponent } from 'ng-zorro-antd/divider';\r\nimport { NzFlexModule } from 'ng-zorro-antd/flex';\r\nimport { NzTypographyModule } from 'ng-zorro-antd/typography';\r\nimport {\r\n  DefaultButtonComponent,\r\n  DefaultInputComponent,\r\n  SvgIconComponent,\r\n} from 'src/app/shared/components';\r\nimport { SubmitDirective } from 'src/app/shared/directives';\r\n\r\nimport { LoginComponent } from './login.component';\r\nimport { LoginRoutingModule } from './login-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [LoginComponent],\r\n  imports: [\r\n    CommonModule,\r\n    LoginRoutingModule,\r\n    DefaultInputComponent,\r\n    DefaultButtonComponent,\r\n    NzDividerComponent,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    NzTypographyModule,\r\n    TranslocoModule,\r\n    NzFlexModule,\r\n    SubmitDirective,\r\n    SvgIconComponent,\r\n  ],\r\n})\r\nexport class LoginModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DefaultButtonComponent"
                        },
                        {
                            "name": "DefaultInputComponent"
                        },
                        {
                            "name": "LoginRoutingModule"
                        },
                        {
                            "name": "SubmitDirective"
                        },
                        {
                            "name": "SvgIconComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoginRoutingModule",
            "id": "module-LoginRoutingModule-106a7add70fb35dd8fc60e545afc0f88cac22e9f3c21c1dbd1a47cedd48d4580406cd3eb3e565915bbb8b25e81f99c889407c08ae7d569a3b192be19c7be864e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/auth/page/login/login-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { LoginComponent } from './login.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: LoginComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class LoginRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PartnerModule",
            "id": "module-PartnerModule-a8021dca21675046233afc4dceb79a70bce62cc691ed77b4dba499b50c76adf1959bc70a167972d71f844cf6f8106ebd65261bbddf5b8c8a75c7f2ad5c48c10f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/partner/partner.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { PartnerRoutingModule } from './partner-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [CommonModule, PartnerRoutingModule],\r\n})\r\nexport class PartnerModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PartnerRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PartnerRoutingModule",
            "id": "module-PartnerRoutingModule-4a99630a5016a79af4ddfe58bdd22a9ff47347377a94c381641ac87a186e68cbecfef345ef59c56e6b0bf2d00a585b68bada5014737e7edac9638c3ea149d7bc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/partner/partner-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class PartnerRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RecoverModule",
            "id": "module-RecoverModule-5a5a4115122696fd2b53888f5d3e8353f7547a8aa8b97a2434e910a3a698677b53c7d8d472a547ec04a9b27b3d773c96019c67210e608f4ca5964e99e6bf99a8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/auth/page/recover/recover.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { RecoverComponent } from './recover.component';\r\nimport { RecoverRoutingModule } from './recover-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [RecoverComponent],\r\n  imports: [CommonModule, RecoverRoutingModule],\r\n})\r\nexport class RecoverModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RecoverComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "RecoverRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RecoverRoutingModule",
            "id": "module-RecoverRoutingModule-174a563da0cd32a5c728cc25d288aa1b14b6e01d9ff2ef96868b3b3bfe6468f60e4c17146ae85813f6a2d012f9feb4d55c367d5855a207a013d1b98935bc4dae",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/auth/page/recover/recover-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { RecoverComponent } from './recover.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: RecoverComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class RecoverRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RequestModule",
            "id": "module-RequestModule-17e8cd922f6917e5c08a6849fc050292e401df9ec74d24622ca642a9bec5dee6fbdfa54a2d94d120fd0eddee357fc94fffc08aec17129b0b399d7fa024827307",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/request/request.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { RequestRoutingModule } from './request-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [CommonModule, RequestRoutingModule],\r\n})\r\nexport class RequestModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "RequestRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RequestRoutingModule",
            "id": "module-RequestRoutingModule-89fbeb3df77b652cb6f56c651f082cd12c375c8bede9b429788ee655ae591ea114b679efa0abb7b81186d844ee52e9c314a8da39bcb96980129b3ff1f6f6aa50",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/request/request-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class RequestRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SettingsModule",
            "id": "module-SettingsModule-7075f4f19255d4d67139666058fd24fc397c814c9ee4b867fd9b0d992356adf52b00a18365fa58e08c9a032855c1d21c9b42e79eabda391e31ccc3e9134566de",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/settings/settings.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { SettingsRoutingModule } from './settings-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [CommonModule, SettingsRoutingModule],\r\n})\r\nexport class SettingsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SettingsRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SettingsRoutingModule",
            "id": "module-SettingsRoutingModule-0a52cb2b03300e5ed00cd970bf564df6df4d3540b5b9ed3ecbd2a284d2da6097cabb5c0548be7587a6e4e1776bd2fb5b84229a494203bc8069cb9886203bd788",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/settings/settings-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class SettingsRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ShopModule",
            "id": "module-ShopModule-f5da6cf6e1d716179c26d0dc0493ea9e263e372967749a56e9826a2458012002fbdb7ea79f555a176cd9fd8798167cd971a47fe42d97370b738d7f20f5fae388",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/shop/shop.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { ShopRoutingModule } from './shop-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [CommonModule, ShopRoutingModule],\r\n})\r\nexport class ShopModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ShopRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ShopRoutingModule",
            "id": "module-ShopRoutingModule-78d09c3fa592e8806f1affed4bcd37708ae5f2d579eb656765e559fe335815feaaa2783985ec6baac078c418196af1b7d60d98e78908792e9b4c913149d40209",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/shop/shop-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class ShopRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "authGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/guards/auth.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(): boolean => {\r\n  const jwt = inject(JwtHelperService);\r\n  const storage = inject(StorageService);\r\n  const router = inject(Router);\r\n  const isExpired = jwt.isTokenExpired(storage.token);\r\n\r\n  if (isExpired) {\r\n    storage.removeToken();\r\n\r\n    router.navigate([ROOT_ROUTE.auth, AUTH_ROUTE.login]);\r\n  }\r\n\r\n  return !isExpired;\r\n}"
            },
            {
                "name": "coreGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/guards/core.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "() => {\r\n  const storage = inject(StorageService);\r\n  const router = inject(Router);\r\n\r\n  if (storage.token) {\r\n    router.navigate([ROOT_ROUTE.dashboard]);\r\n  }\r\n\r\n  return true;\r\n}"
            },
            {
                "name": "coreInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/interceptors/core.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(req, next) => {\r\n  const storage = inject(StorageService);\r\n  const token = storage.token;\r\n  const headers = req.url.includes('auth') ? `Bearer ${token}` : null;\r\n\r\n  if (!req.url.includes('assets')) {\r\n    req = req.clone({\r\n      url: environment.apiUrl + req.url,\r\n      setHeaders: {\r\n        Authorization: headers,\r\n      },\r\n    });\r\n  }\r\n\r\n  return next(req);\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n  apiUrl: 'https://bipbip.uz/api/',\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  apiUrl: 'https://bipbip.uz/api/',\r\n}"
            },
            {
                "name": "errorInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/interceptors/error.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(req, next) => {\r\n  const navigationService = inject(NavigationService);\r\n  const storageService = inject(StorageService);\r\n  const messageService = inject(MessageService);\r\n\r\n  return next(req).pipe(\r\n    catchError((err: HttpErrorResponse) => {\r\n      if (err.status === 401) {\r\n        storageService.removeToken();\r\n\r\n        navigationService.onLogout().then(() => {\r\n          messageService.onNotifyError(ERROR_MESSAGE.unauthorized);\r\n        });\r\n      }\r\n\r\n      if (err.status === 403) {\r\n        messageService.onNotifyError(ERROR_MESSAGE.forbidden);\r\n      }\r\n\r\n      if (err.status === 500) {\r\n        if (storageService.token) {\r\n          storageService.removeToken();\r\n        }\r\n\r\n        navigationService.onServerErrorPage();\r\n      }\r\n\r\n      return throwError(() => err);\r\n    }),\r\n  );\r\n}"
            },
            {
                "name": "LANGUAGE_LOCALE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/language.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "LocaleType",
                "defaultValue": "{\r\n  uz: ru_RU,\r\n  ru: ru_RU,\r\n  en: en_US,\r\n}"
            },
            {
                "name": "PRIMARY_COLOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/theme.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "{\r\n  default: '#377E95',\r\n  dark: '#913DF3',\r\n}"
            },
            {
                "name": "progressInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/interceptors/progress.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(req, next) => {\r\n  const progress = inject(ProgressService);\r\n\r\n  progress.status = true;\r\n\r\n  return next(req).pipe(finalize(() => (progress.status = false)));\r\n}"
            },
            {
                "name": "SVG_ICONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/icons.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "{\r\n  sili: 'sili',\r\n}"
            }
        ],
        "functions": [
            {
                "name": "iconFactory",
                "file": "src/app/core/utils/icon-factory.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "iconService",
                        "type": "NzIconService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Observable<void>",
                "jsdoctags": [
                    {
                        "name": "iconService",
                        "type": "NzIconService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "jwtOptionsFactory",
                "file": "src/app/core/utils/jwt-factory.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "JwtOptions",
                "jsdoctags": [
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "langFactory",
                "file": "src/app/core/utils/lang-factory.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "langService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Observable<string>",
                "jsdoctags": [
                    {
                        "name": "langService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "themeFactory",
                "file": "src/app/core/utils/theme-factory.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Observable<ThemeType>",
                "jsdoctags": [
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AuthLoginData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "FormValue<AuthLoginForm>",
                "file": "src/app/api/typings/auth.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "AuthLoginForm",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/typings/auth.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "ControlType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "AbstractControl | FormGroup | FormArray",
                "file": "src/app/typings/base.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "CUSTOM_ICONS_TYPE",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/typings/icons.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 201
            },
            {
                "name": "DashboardMenuItem",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/typings/menu.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "FormValue",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/typings/base.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 200
            },
            {
                "name": "FunctionType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/app/typings/base.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "ICONS_CURSOR_TYPE",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"pointer\" | \"default\" | \"inherit\"",
                "file": "src/app/typings/icons.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ICONS_TYPE",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "CUSTOM_ICONS_TYPE | NZ_ICONS_TYPE",
                "file": "src/app/typings/icons.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "JwtOptions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/typings/base.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "LanguageItem",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/typings/language.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "LocaleType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": " | ",
                "file": "src/app/typings/locale.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "NZ_ICONS_TYPE",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"car\" | \"shop\" | \"team\" | \"message\" | \"phone\" | \"star\" | \"eye\" | \"eye-invisible\" | \"setting\"",
                "file": "src/app/typings/icons.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ThemeItem",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/typings/theme.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "ThemeType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/typings/theme.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            }
        ],
        "enumerations": [
            {
                "name": "AUTH_QUERY",
                "childs": [
                    {
                        "name": "login",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "auth/login"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/api/constants/auth.api.ts"
            },
            {
                "name": "AUTH_ROUTE",
                "childs": [
                    {
                        "name": "login",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "login"
                    },
                    {
                        "name": "recover",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "recover"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/constants/auth-route.ts"
            },
            {
                "name": "BRAND",
                "childs": [
                    {
                        "name": "sili",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Sili"
                    },
                    {
                        "name": "wella",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Wella"
                    },
                    {
                        "name": "bipbip",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Bipbip"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/constants/brands.ts"
            },
            {
                "name": "DASHBOARD_ROUTE",
                "childs": [
                    {
                        "name": "car",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "car"
                    },
                    {
                        "name": "shop",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "shop"
                    },
                    {
                        "name": "partner",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "partner"
                    },
                    {
                        "name": "request",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "request"
                    },
                    {
                        "name": "feedback",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "feedback"
                    },
                    {
                        "name": "settings",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "settings"
                    },
                    {
                        "name": "profile",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "profile"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/constants/dashboard-route.ts"
            },
            {
                "name": "ERROR_MESSAGE",
                "childs": [
                    {
                        "name": "unauthorized",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "messages.error.unauthorized"
                    },
                    {
                        "name": "server",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "messages.error.server"
                    },
                    {
                        "name": "forbidden",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "messages.error.forbidden"
                    },
                    {
                        "name": "lang",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "messages.error.lang"
                    },
                    {
                        "name": "theme",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "messages.error.theme"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/constants/messages.ts"
            },
            {
                "name": "INFO_MESSAGE",
                "childs": [
                    {
                        "name": "change",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "messages.info.change"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/constants/messages.ts"
            },
            {
                "name": "LANGUAGE",
                "childs": [
                    {
                        "name": "uz",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "uz"
                    },
                    {
                        "name": "ru",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ru"
                    },
                    {
                        "name": "en",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "en"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/constants/language.ts"
            },
            {
                "name": "ROOT_ROUTE",
                "childs": [
                    {
                        "name": "auth",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "auth"
                    },
                    {
                        "name": "dashboard",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dashboard"
                    },
                    {
                        "name": "not_found",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "404"
                    },
                    {
                        "name": "server_error",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "500"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/constants/root-route.ts"
            },
            {
                "name": "STORAGE_KEY",
                "childs": [
                    {
                        "name": "token",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "access_token"
                    },
                    {
                        "name": "lang",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "lang"
                    },
                    {
                        "name": "theme",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "theme"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/constants/storage.ts"
            },
            {
                "name": "SUCCESS_MESSAGE",
                "childs": [
                    {
                        "name": "update",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "messages.success.update"
                    },
                    {
                        "name": "delete",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "messages.success.delete"
                    },
                    {
                        "name": "create",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "messages.success.create"
                    },
                    {
                        "name": "lang",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "messages.success.lang"
                    },
                    {
                        "name": "theme",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "messages.success.theme"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/constants/messages.ts"
            },
            {
                "name": "THEME",
                "childs": [
                    {
                        "name": "default",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "default"
                    },
                    {
                        "name": "dark",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dark"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/constants/theme.ts"
            },
            {
                "name": "VALIDATION_ERROR",
                "childs": [
                    {
                        "name": "required",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "required"
                    },
                    {
                        "name": "minlength",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "minlength"
                    },
                    {
                        "name": "maxlength",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "maxlength"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/constants/validation.ts"
            }
        ],
        "groupedVariables": {
            "src/app/core/guards/auth.guard.ts": [
                {
                    "name": "authGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/guards/auth.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(): boolean => {\r\n  const jwt = inject(JwtHelperService);\r\n  const storage = inject(StorageService);\r\n  const router = inject(Router);\r\n  const isExpired = jwt.isTokenExpired(storage.token);\r\n\r\n  if (isExpired) {\r\n    storage.removeToken();\r\n\r\n    router.navigate([ROOT_ROUTE.auth, AUTH_ROUTE.login]);\r\n  }\r\n\r\n  return !isExpired;\r\n}"
                }
            ],
            "src/app/core/guards/core.guard.ts": [
                {
                    "name": "coreGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/guards/core.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "() => {\r\n  const storage = inject(StorageService);\r\n  const router = inject(Router);\r\n\r\n  if (storage.token) {\r\n    router.navigate([ROOT_ROUTE.dashboard]);\r\n  }\r\n\r\n  return true;\r\n}"
                }
            ],
            "src/app/core/interceptors/core.interceptor.ts": [
                {
                    "name": "coreInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/interceptors/core.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(req, next) => {\r\n  const storage = inject(StorageService);\r\n  const token = storage.token;\r\n  const headers = req.url.includes('auth') ? `Bearer ${token}` : null;\r\n\r\n  if (!req.url.includes('assets')) {\r\n    req = req.clone({\r\n      url: environment.apiUrl + req.url,\r\n      setHeaders: {\r\n        Authorization: headers,\r\n      },\r\n    });\r\n  }\r\n\r\n  return next(req);\r\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n  apiUrl: 'https://bipbip.uz/api/',\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  apiUrl: 'https://bipbip.uz/api/',\r\n}"
                }
            ],
            "src/app/core/interceptors/error.interceptor.ts": [
                {
                    "name": "errorInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/interceptors/error.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(req, next) => {\r\n  const navigationService = inject(NavigationService);\r\n  const storageService = inject(StorageService);\r\n  const messageService = inject(MessageService);\r\n\r\n  return next(req).pipe(\r\n    catchError((err: HttpErrorResponse) => {\r\n      if (err.status === 401) {\r\n        storageService.removeToken();\r\n\r\n        navigationService.onLogout().then(() => {\r\n          messageService.onNotifyError(ERROR_MESSAGE.unauthorized);\r\n        });\r\n      }\r\n\r\n      if (err.status === 403) {\r\n        messageService.onNotifyError(ERROR_MESSAGE.forbidden);\r\n      }\r\n\r\n      if (err.status === 500) {\r\n        if (storageService.token) {\r\n          storageService.removeToken();\r\n        }\r\n\r\n        navigationService.onServerErrorPage();\r\n      }\r\n\r\n      return throwError(() => err);\r\n    }),\r\n  );\r\n}"
                }
            ],
            "src/app/constants/language.ts": [
                {
                    "name": "LANGUAGE_LOCALE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/language.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LocaleType",
                    "defaultValue": "{\r\n  uz: ru_RU,\r\n  ru: ru_RU,\r\n  en: en_US,\r\n}"
                }
            ],
            "src/app/constants/theme.ts": [
                {
                    "name": "PRIMARY_COLOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/theme.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "{\r\n  default: '#377E95',\r\n  dark: '#913DF3',\r\n}"
                }
            ],
            "src/app/core/interceptors/progress.interceptor.ts": [
                {
                    "name": "progressInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/interceptors/progress.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(req, next) => {\r\n  const progress = inject(ProgressService);\r\n\r\n  progress.status = true;\r\n\r\n  return next(req).pipe(finalize(() => (progress.status = false)));\r\n}"
                }
            ],
            "src/app/constants/icons.ts": [
                {
                    "name": "SVG_ICONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/icons.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "{\r\n  sili: 'sili',\r\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/core/utils/icon-factory.ts": [
                {
                    "name": "iconFactory",
                    "file": "src/app/core/utils/icon-factory.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "iconService",
                            "type": "NzIconService",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Observable<void>",
                    "jsdoctags": [
                        {
                            "name": "iconService",
                            "type": "NzIconService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/utils/jwt-factory.ts": [
                {
                    "name": "jwtOptionsFactory",
                    "file": "src/app/core/utils/jwt-factory.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "storageService",
                            "type": "StorageService",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "JwtOptions",
                    "jsdoctags": [
                        {
                            "name": "storageService",
                            "type": "StorageService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/utils/lang-factory.ts": [
                {
                    "name": "langFactory",
                    "file": "src/app/core/utils/lang-factory.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "langService",
                            "type": "LanguageService",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "storageService",
                            "type": "StorageService",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Observable<string>",
                    "jsdoctags": [
                        {
                            "name": "langService",
                            "type": "LanguageService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "storageService",
                            "type": "StorageService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/utils/theme-factory.ts": [
                {
                    "name": "themeFactory",
                    "file": "src/app/core/utils/theme-factory.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "themeService",
                            "type": "ThemeService",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "storageService",
                            "type": "StorageService",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Observable<ThemeType>",
                    "jsdoctags": [
                        {
                            "name": "themeService",
                            "type": "ThemeService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "storageService",
                            "type": "StorageService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/api/constants/auth.api.ts": [
                {
                    "name": "AUTH_QUERY",
                    "childs": [
                        {
                            "name": "login",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "auth/login"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/api/constants/auth.api.ts"
                }
            ],
            "src/app/constants/auth-route.ts": [
                {
                    "name": "AUTH_ROUTE",
                    "childs": [
                        {
                            "name": "login",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "login"
                        },
                        {
                            "name": "recover",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "recover"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/constants/auth-route.ts"
                }
            ],
            "src/app/constants/brands.ts": [
                {
                    "name": "BRAND",
                    "childs": [
                        {
                            "name": "sili",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Sili"
                        },
                        {
                            "name": "wella",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Wella"
                        },
                        {
                            "name": "bipbip",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Bipbip"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/constants/brands.ts"
                }
            ],
            "src/app/constants/dashboard-route.ts": [
                {
                    "name": "DASHBOARD_ROUTE",
                    "childs": [
                        {
                            "name": "car",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "car"
                        },
                        {
                            "name": "shop",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "shop"
                        },
                        {
                            "name": "partner",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "partner"
                        },
                        {
                            "name": "request",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "request"
                        },
                        {
                            "name": "feedback",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "feedback"
                        },
                        {
                            "name": "settings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "settings"
                        },
                        {
                            "name": "profile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "profile"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/constants/dashboard-route.ts"
                }
            ],
            "src/app/constants/messages.ts": [
                {
                    "name": "ERROR_MESSAGE",
                    "childs": [
                        {
                            "name": "unauthorized",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "messages.error.unauthorized"
                        },
                        {
                            "name": "server",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "messages.error.server"
                        },
                        {
                            "name": "forbidden",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "messages.error.forbidden"
                        },
                        {
                            "name": "lang",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "messages.error.lang"
                        },
                        {
                            "name": "theme",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "messages.error.theme"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/constants/messages.ts"
                },
                {
                    "name": "INFO_MESSAGE",
                    "childs": [
                        {
                            "name": "change",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "messages.info.change"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/constants/messages.ts"
                },
                {
                    "name": "SUCCESS_MESSAGE",
                    "childs": [
                        {
                            "name": "update",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "messages.success.update"
                        },
                        {
                            "name": "delete",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "messages.success.delete"
                        },
                        {
                            "name": "create",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "messages.success.create"
                        },
                        {
                            "name": "lang",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "messages.success.lang"
                        },
                        {
                            "name": "theme",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "messages.success.theme"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/constants/messages.ts"
                }
            ],
            "src/app/constants/language.ts": [
                {
                    "name": "LANGUAGE",
                    "childs": [
                        {
                            "name": "uz",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "uz"
                        },
                        {
                            "name": "ru",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ru"
                        },
                        {
                            "name": "en",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "en"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/constants/language.ts"
                }
            ],
            "src/app/constants/root-route.ts": [
                {
                    "name": "ROOT_ROUTE",
                    "childs": [
                        {
                            "name": "auth",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "auth"
                        },
                        {
                            "name": "dashboard",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dashboard"
                        },
                        {
                            "name": "not_found",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "404"
                        },
                        {
                            "name": "server_error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "500"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/constants/root-route.ts"
                }
            ],
            "src/app/constants/storage.ts": [
                {
                    "name": "STORAGE_KEY",
                    "childs": [
                        {
                            "name": "token",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "access_token"
                        },
                        {
                            "name": "lang",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "lang"
                        },
                        {
                            "name": "theme",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "theme"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/constants/storage.ts"
                }
            ],
            "src/app/constants/theme.ts": [
                {
                    "name": "THEME",
                    "childs": [
                        {
                            "name": "default",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "default"
                        },
                        {
                            "name": "dark",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dark"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/constants/theme.ts"
                }
            ],
            "src/app/constants/validation.ts": [
                {
                    "name": "VALIDATION_ERROR",
                    "childs": [
                        {
                            "name": "required",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "required"
                        },
                        {
                            "name": "minlength",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "minlength"
                        },
                        {
                            "name": "maxlength",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "maxlength"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/constants/validation.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/api/typings/auth.type.ts": [
                {
                    "name": "AuthLoginData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "FormValue<AuthLoginForm>",
                    "file": "src/app/api/typings/auth.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/typings/auth.type.ts": [
                {
                    "name": "AuthLoginForm",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/typings/auth.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/typings/base.type.ts": [
                {
                    "name": "ControlType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "AbstractControl | FormGroup | FormArray",
                    "file": "src/app/typings/base.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "FormValue",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/typings/base.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 200
                },
                {
                    "name": "FunctionType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/app/typings/base.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "JwtOptions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/typings/base.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/typings/icons.type.ts": [
                {
                    "name": "CUSTOM_ICONS_TYPE",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/typings/icons.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 201
                },
                {
                    "name": "ICONS_CURSOR_TYPE",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"pointer\" | \"default\" | \"inherit\"",
                    "file": "src/app/typings/icons.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "ICONS_TYPE",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "CUSTOM_ICONS_TYPE | NZ_ICONS_TYPE",
                    "file": "src/app/typings/icons.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "NZ_ICONS_TYPE",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"car\" | \"shop\" | \"team\" | \"message\" | \"phone\" | \"star\" | \"eye\" | \"eye-invisible\" | \"setting\"",
                    "file": "src/app/typings/icons.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/typings/menu.type.ts": [
                {
                    "name": "DashboardMenuItem",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/typings/menu.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/typings/language.type.ts": [
                {
                    "name": "LanguageItem",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/typings/language.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/typings/locale.type.ts": [
                {
                    "name": "LocaleType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": " | ",
                    "file": "src/app/typings/locale.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/typings/theme.type.ts": [
                {
                    "name": "ThemeItem",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/typings/theme.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "ThemeType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/typings/theme.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/api/services/base-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BaseApiService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/typings/auth.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAuthLoginResponse",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/icons.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SVG_ICONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/language.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LANGUAGE_LOCALE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/theme.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PRIMARY_COLOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/auth.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/core.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "coreGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/core.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "coreInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/error.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "errorInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/progress.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "progressInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/destroy.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DestroyService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/language.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LanguageService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/message.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MessageService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/meta.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MetaService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/navigation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NavigationService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/progress.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProgressService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StorageService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/theme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/transloco-loader.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TranslocoHttpLoader",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/validation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ValidationService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/utils/icon-factory.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "iconFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/utils/jwt-factory.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "jwtOptionsFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/utils/lang-factory.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "langFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/utils/theme-factory.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "themeFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/auth-layout/auth-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/dashboard-layout/components/dashboard-header/dashboard-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/dashboard-layout/components/dashboard-main/dashboard-main.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardMainComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/dashboard-layout/dashboard-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/dashboard-layout/services/dashboard-layout.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DashboardLayoutService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/auth/page/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/auth/page/recover/recover.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecoverComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/error/error.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ErrorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/circle-button/circle-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CircleButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/default-button/default-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/default-input/default-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/svg-icon/svg-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SvgIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/submit.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SubmitDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}